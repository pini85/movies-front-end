{"version":3,"sources":["hooks/useDidUpdateEffect.hooks.jsx","components/Pagination/pagination.styles.jsx","components/Pagination/Pagination.component.jsx","components/Category/Category.styles.jsx","components/Category/Category.component.jsx","components/TvShows/TvShows.component.jsx"],"names":["useDidUpdateEffect","fn","inputs","didMountRef","useRef","useEffect","current","Container","styled","div","ButtonContainer","button","compose","withRouter","connect","state","currentPage","isFetching","bool","setCurrentPage","page","api","data","actor","history","location","useState","buttons","setButtons","count","setCount","amount","setAmount","totalPages","total_pages","width","useWidth","changeLocation","loc","pathname","split","replace","length","push","a","fetchData","amountOfButtons","i","changeCounter","type","value","jump","pageNumber","Math","max","min","bold","fontWeight","background","onClick","first","slice","map","className","style","ovderflow","difference","changeCounterForJump","last","OptionContainer","optionActive","highestRatedMovies","newestMovies","fetchNewestMovies","fetchHighestRatedMovies","movies","title","options","option","dataType","changeUrl","changeUrlName","url","category","showMovieList","console","log","color","textAlign","TvShows"],"mappings":"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","file":"static/js/7.29016f16.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nfunction useDidUpdateEffect(fn, inputs) {\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (didMountRef.current) {\n      fn();\n    } else {\n      didMountRef.current = true;\n    }\n  }, inputs);\n}\n\nexport default useDidUpdateEffect;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 0 11rem 4rem 11rem;\n\n  background: var(--secondary-color);\n`;\nexport const ButtonContainer = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  cursor: pointer;\n  font-size: 1.5rem;\n  background: var(--secondary-color-light);\n  color: var(--text-white);\n\n  padding: 3px 8px;\n  border: 1px solid var(--secondary-color-lightest);\n  transition: all 0.3s;\n  &:hover {\n    background: var(--secondary-color-lightest);\n    color: var(--text-dark);\n  }\n  &:focus {\n    outline: 0 !important;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { Container, ButtonContainer } from \"./pagination.styles\";\nimport useDidUpdateEffect from \"../../hooks/useDidUpdateEffect.hooks\";\nimport { isFetching, currentPage } from \"../../redux/actions/index\";\nimport useWidth from \"../../hooks/useWidth.hooks\";\n\nconst Pagination = ({\n  api,\n  data,\n  actor,\n  history,\n  location,\n  isFetching,\n  currentPage,\n  setCurrentPage,\n}) => {\n  const [buttons, setButtons] = useState(null);\n  const [count, setCount] = useState(1);\n  const [amount, setAmount] = useState(20);\n  // const [currentPage, setCurrentPage] = useState(1);\n  const totalPages = data ? data.total_pages : null;\n  const width = useWidth().width;\n  const changeLocation = () => {\n    const loc = location.pathname;\n\n    const split = loc.split(\"/\");\n    return loc.replace(split[split.length - 1], currentPage);\n  };\n\n  useEffect(() => {\n    setCurrentPage(1);\n    history.push(changeLocation());\n    if (width <= 500) {\n      setAmount(5);\n    } else if (width <= 700) {\n      setAmount(10);\n    }\n  }, []);\n\n  useDidUpdateEffect(() => {\n    const fetchData = async () => {\n      if (actor) {\n        isFetching(true);\n\n        await api(actor, currentPage);\n\n        isFetching(false);\n      } else {\n        isFetching(true);\n        await api(currentPage);\n        isFetching(false);\n      }\n      history.push(changeLocation());\n    };\n    fetchData();\n    // displayPage(1);\n  }, [currentPage]);\n\n  useEffect(() => {\n    let amountOfButtons = [];\n\n    for (let i = count; i <= totalPages; i++) {\n      amountOfButtons.push(i);\n    }\n    setButtons(amountOfButtons);\n  }, [currentPage, totalPages]);\n\n  const changeCounter = (type) => {\n    const difference = currentPage - amount / 2;\n\n    if (difference > 0 && totalPages - currentPage >= amount / 2) {\n      type === \"next\"\n        ? setCount((value) => ++value)\n        : setCount((value) => --value);\n    }\n  };\n  const changeCounterForJump = (page) => {\n    const difference = page - amount / 2;\n\n    if (difference >= 0 && totalPages - page >= 10) {\n      setCount(difference + 1);\n    } else if (totalPages - page < 10 && page > amount / 2) {\n      setCount(totalPages - 10 - 10);\n    } else {\n      setCount(1);\n    }\n  };\n\n  const prev = () => {\n    setCurrentPage(Math.max(currentPage - 1, 1));\n  };\n\n  const first = (setCount) => {\n    setCurrentPage(1);\n    setCount(1);\n  };\n\n  const next = () => {\n    setCurrentPage(Math.min(currentPage + 1, totalPages));\n  };\n\n  const jump = (page) => {\n    const pageNumber = Math.max(1, page);\n    setCurrentPage(Math.min(pageNumber, totalPages));\n  };\n\n  const last = (setCount) => {\n    setCurrentPage(totalPages);\n    if (totalPages === 5) {\n      setCount(totalPages - 4);\n    } else {\n      setCount(totalPages - 19);\n    }\n  };\n\n  const bold = (page) => {\n    //\n    //\n    //\n\n    return page == currentPage\n      ? { fontWeight: \"700\", background: \"var(--secondary-color-lightest)\" }\n      : null;\n  };\n\n  return (\n    <Container>\n      <ButtonContainer onClick={() => prev(count, changeCounter(\"prev\"))}>\n        <div>&#8592;</div> Prev\n      </ButtonContainer>\n      <ButtonContainer onClick={() => first(setCount)}>First</ButtonContainer>\n      {buttons && buttons.length > amount\n        ? buttons.slice(0, amount).map((page) => {\n            return (\n              <div key={page} className=\"hiiii\" style={{ ovderflow: \"hidden\" }}>\n                <ButtonContainer\n                  style={bold(page)}\n                  onClick={() => {\n                    jump(page);\n                    changeCounterForJump(page);\n                  }}\n                >\n                  {page}\n                </ButtonContainer>\n              </div>\n            );\n          })\n        : buttons &&\n          buttons.map((page) => {\n            return (\n              <div className=\"hiiii\" style={{ ovderflow: \"hidden\" }}>\n                <ButtonContainer\n                  style={bold(page)}\n                  onClick={() => jump(page, changeCounter())}\n                >\n                  {page}\n                </ButtonContainer>\n              </div>\n            );\n          })}\n      <ButtonContainer onClick={() => last(setCount)}>Last</ButtonContainer>\n      <ButtonContainer onClick={() => next(count, changeCounter(\"next\"))}>\n        Next\n      </ButtonContainer>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  currentPage: state.currentPage,\n});\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, {\n    isFetching: (bool) => isFetching(bool),\n    setCurrentPage: (page) => currentPage(page),\n  })\n)(Pagination);\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background: var(--secondary-color);\n`;\n\nexport const OptionContainer = styled.div`\n  margin: 3rem 0;\n  display: flex;\n  justify-content: center;\n  @media screen and (max-width: 700px) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  fetchNewestMovies,\n  fetchHighestRatedMovies,\n} from \"../../redux/actions\";\nimport CategoryTitle from \"../CategoryTitle/CategoryTitle.component\";\nimport MovieListCategory from \"../MovieListCategory/MovieListCategory.component\";\nimport Option from \"../Option/Option.component\";\nimport Pagination from \"../Pagination/Pagination.component\";\nimport { Container, OptionContainer } from \"./Category.styles\";\nconst Category = ({\n  movies,\n  title,\n  options,\n  optionActive,\n  fetchHighestRatedMovies,\n  fetchNewestMovies,\n  highestRatedMovies,\n  newestMovies,\n}) => {\n  const showMovieList = () => {\n    switch (optionActive) {\n      case 1:\n        return (\n          <>\n            <Pagination api={fetchNewestMovies} data={newestMovies} />\n            <MovieListCategory category=\"newest movies\" />\n            <Pagination api={fetchNewestMovies} data={newestMovies} />\n          </>\n        );\n\n      case 2:\n        return (\n          <>\n            <Pagination\n              api={fetchHighestRatedMovies}\n              data={highestRatedMovies}\n            />\n            <MovieListCategory category=\"highest rating\" />\n            <Pagination\n              api={fetchHighestRatedMovies}\n              data={highestRatedMovies}\n            />\n          </>\n        );\n    }\n  };\n\n  const showTvList = () => {\n    console.log(\"im invoked\");\n\n    return (\n      <h1 style={{ color: \"white\", textAlign: \"center\", fontWeight: \"700\" }}>\n        COMING SOON\n      </h1>\n    );\n  };\n  return (\n    <Container>\n      <CategoryTitle title={title}></CategoryTitle>\n\n      <OptionContainer>\n        {options.map((option) => {\n          return (\n            <Option\n              title={option.title}\n              dataType={option.dataType}\n              changeUrl={true}\n              changeUrlName={option.url}\n            ></Option>\n          );\n        })}\n      </OptionContainer>\n      {movies ? showMovieList() : showTvList()}\n    </Container>\n  );\n};\nconst mapStateToProps = (state) => ({\n  optionActive: state.optionActive,\n  highestRatedMovies: state.highestRatedMovies,\n  newestMovies: state.newestMovies,\n});\nexport default connect(mapStateToProps, {\n  fetchNewestMovies: (page) => fetchNewestMovies(page),\n  fetchHighestRatedMovies: (page) => fetchHighestRatedMovies(page),\n})(Category);\n","import React from \"react\";\nimport Category from \"../Category/Category.component\";\nconst TvShows = () => {\n  const options = [\n    {\n      title: \"latest tv shows\",\n      dataType: 1,\n      url: \"latest\",\n    },\n    {\n      title: \"highest rating\",\n      dataType: 2,\n      url: \"top\",\n    },\n  ];\n  return (\n    <>\n      <Category title=\"tv shows\" options={options} />\n    </>\n  );\n};\nexport default TvShows;\n"],"sourceRoot":""}